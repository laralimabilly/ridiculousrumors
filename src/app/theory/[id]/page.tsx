// app/theory/[id]/page.tsx
import { Metadata } from 'next';
import { notFound } from 'next/navigation';
import TheoryPageClient from './theory-page-client';
import { theoryService } from '@/lib/theoryService';
import type { ConspiracyTheory } from '@/types/conspiracy';

interface TheoryPageProps {
  params: { id: string };
}

// Generate metadata for each theory page
export async function generateMetadata({ params }: TheoryPageProps): Promise<Metadata> {
  let theory: ConspiracyTheory | null = null;
  
  try {
    // Fetch theory data (you'll need to implement getTheoryById in your service)
    theory = await theoryService.getTheoryById(params.id);
  } catch (error) {
    console.error('Error fetching theory for metadata:', error);
  }

  if (!theory) {
    return {
      title: 'Theory Not Found - Ridiculous Rumors',
      description: 'The requested conspiracy theory could not be found.',
    };
  }

  const theoryPreview = theory.content.length > 160 
    ? `${theory.content.substring(0, 160)}...`
    : theory.content;

  const pageTitle = `"${theory.content.substring(0, 50)}${theory.content.length > 50 ? '...' : ''}" - Ridiculous Rumors`;
  const pageDescription = `Fictional conspiracy theory: "${theoryPreview}" Generated by AI for entertainment. Category: ${theory.category}. All content is satirical fiction.`;

  return {
    title: pageTitle,
    description: pageDescription,
    keywords: [
      'conspiracy theory',
      'fictional',
      'comedy',
      'satire',
      'entertainment',
      theory.category,
      'AI generated',
      'humor'
    ],
    authors: [{ name: 'Ridiculous Rumors AI' }],
    
    openGraph: {
      type: 'article',
      title: pageTitle,
      description: pageDescription,
      url: `https://ridiculousrumors.com/theory/${params.id}`,
      siteName: 'Ridiculous Rumors',
      publishedTime: theory.createdAt.toISOString(),
      modifiedTime: theory.createdAt.toISOString(),
      section: 'Entertainment',
      tags: ['Comedy', 'Satire', 'Fictional', theory.category],
      images: [
        {
          url: `/api/og-image/${params.id}`, // Dynamic OG image
          width: 1200,
          height: 630,
          alt: `Ridiculous Rumors Theory: ${theory.content.substring(0, 100)}`,
          type: 'image/png',
        },
        {
          url: '/og-image.png', // Fallback image
          width: 1200,
          height: 630,
          alt: 'Ridiculous Rumors - Comedy Theory Generator',
          type: 'image/png',
        }
      ],
    },

    twitter: {
      card: 'summary_large_image',
      title: pageTitle,
      description: pageDescription,
      site: '@RidiculousRumors',
      creator: '@RidiculousRumors',
      images: {
        url: `/api/og-image/${params.id}`,
        alt: `Comedy Theory: ${theory.content.substring(0, 100)}`,
      },
    },

    other: {
      'article:author': 'Ridiculous Rumors AI',
      'article:section': 'Entertainment',
      'article:tag': `Comedy,Satire,Fictional,${theory.category}`,
      'article:published_time': theory.createdAt.toISOString(),
      'article:modified_time': theory.createdAt.toISOString(),
      'content-warning': 'Fictional content for entertainment purposes only',
      'theory:category': theory.category,
      'theory:classification': theory.classification,
      'theory:id': theory.id || '',
    },

    alternates: {
      canonical: `https://ridiculousrumors.com/theory/${params.id}`,
    },
  };
}

// Main page component
export default async function TheoryPage({ params }: TheoryPageProps) {
  let theory: ConspiracyTheory | null = null;
  
  try {
    theory = await theoryService.getTheoryById(params.id);
  } catch (error) {
    console.error('Error fetching theory:', error);
    notFound();
  }

  if (!theory) {
    notFound();
  }

  // Generate structured data for this specific theory
  const structuredData = {
    "@context": "https://schema.org",
    "@type": "Article",
    "headline": `Fictional Theory: ${theory.content.substring(0, 100)}`,
    "description": `Comedy conspiracy theory: ${theory.content}`,
    "image": [`https://ridiculousrumors.com/api/og-image/${params.id}`],
    "datePublished": theory.createdAt.toISOString(),
    "dateModified": theory.createdAt.toISOString(),
    "author": {
      "@type": "Organization",
      "name": "Ridiculous Rumors AI",
      "url": "https://ridiculousrumors.com"
    },
    "publisher": {
      "@type": "Organization",
      "name": "Ridiculous Rumors",
      "logo": {
        "@type": "ImageObject",
        "url": "https://ridiculousrumors.com/logo.png"
      }
    },
    "articleSection": "Entertainment",
    "genre": "Comedy",
    "keywords": `fictional, comedy, satire, ${theory.category}, conspiracy theory`,
    "contentRating": "General Audiences",
    "audience": {
      "@type": "Audience",
      "audienceType": "General Public"
    },
    "about": {
      "@type": "Thing",
      "name": "Fictional Conspiracy Theory",
      "description": "AI-generated satirical content for entertainment"
    },
    "mentions": [
      {
        "@type": "Thing",
        "name": theory.category,
        "description": `Comedy category: ${theory.category}`
      }
    ],
    "isPartOf": {
      "@type": "WebSite",
      "name": "Ridiculous Rumors",
      "url": "https://ridiculousrumors.com"
    },
    "mainEntityOfPage": {
      "@type": "WebPage",
      "@id": `https://ridiculousrumors.com/theory/${params.id}`
    }
  };

  return (
    <>
      {/* Inject structured data */}
      <script
        type="application/ld+json"
        dangerouslySetInnerHTML={{
          __html: JSON.stringify(structuredData),
        }}
      />
      
      {/* Client component with the theory data */}
      <TheoryPageClient theory={theory} />
    </>
  );
}